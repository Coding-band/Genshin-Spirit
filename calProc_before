package com.voc.genshin_helper.util;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import com.voc.genshin_helper.data.Characters;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.Console;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

/**
 * Package com.voc.genshin_helper.data was
 * Created by Voc-夜芷冰 , Programmer of Xectorda
 * Copyright © 2020 Xectorda 版權所有
 */
public class CalculatorProcess {
    /** Crystal*/ /**[碎屑,斷片,塊,原顆]*/
    ArrayList<Integer> 燃願瑪瑙 = new ArrayList<Integer>();
    ArrayList<Integer> 滌淨青金 = new ArrayList<Integer>();
    ArrayList<Integer> 最勝紫晶 = new ArrayList<Integer>();
    ArrayList<Integer> 哀敘冰玉 = new ArrayList<Integer>();
    ArrayList<Integer> 自在松石 = new ArrayList<Integer>();
    ArrayList<Integer> 堅牢黃玉 = new ArrayList<Integer>();

    /** BOSS ASC*/
    int  常燃火種  = 0 ;
    int  淨水之心  = 0 ;
    int  雷光棱鏡  = 0 ;
    int  極寒之核  = 0 ;
    int  颶風之種  = 0 ;
    int  玄岩之塔  = 0 ;
    int  未熟之玉  = 0 ;
    int  晶凝之華  = 0 ;
    int  魔偶機心  = 0 ;
    int  恒常機關之心  = 0 ;
    int  陰燃之珠  = 0 ;

    /** LOCAL */
    int  小燈草  = 0 ;
    int  慕風蘑菇  = 0 ;
    int  夜泊石  = 0 ;
    int  風車菊  = 0 ;
    int  石珀  = 0 ;
    int  蒲公英籽  = 0 ;
    int  嘟嘟蓮  = 0 ;
    int  落落莓  = 0 ;
    int  琉璃百合  = 0 ;
    int  琉璃袋  = 0 ;
    int  鉤鉤果  = 0 ;
    int  塞西莉亞花  = 0 ;
    int  絕雲椒椒  = 0 ;
    int  霓裳花  = 0 ;
    int  星螺  = 0 ;
    int  清心  = 0 ;
    int  海靈芝  = 0 ;
    int  緋櫻繡球  = 0 ;
    int  鳴草  = 0 ;
    int  晶化骨髓  = 0 ;

    /** COMMON */ /**[牢固的箭簇,銳利的箭簇,歷戰的箭簇]*/
    ArrayList<Integer> 歷戰的箭簇 = new ArrayList<Integer>();
    ArrayList<Integer> 禁咒繪卷 = new ArrayList<Integer>();
    ArrayList<Integer> 攫金鴉印 = new ArrayList<Integer>();
    ArrayList<Integer> 不祥的面具 = new ArrayList<Integer>();
    ArrayList<Integer> 尉官的徽記 = new ArrayList<Integer>();
    ArrayList<Integer> 原素花蜜 = new ArrayList<Integer>();
    ArrayList<Integer> 史萊姆原漿 = new ArrayList<Integer>();
    ArrayList<Integer> 名刀鐔 = new ArrayList<Integer>();

    /** T-COMMON*/

    ArrayList<Integer> 自由_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 黃金_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 抗爭_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 勤勞_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 詩文_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 繁榮_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 風雅_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 浮世_的哲學 = new ArrayList<Integer>();
    ArrayList<Integer> 天光_的哲學 = new ArrayList<Integer>();

    /** T-BOSS ASC*/

    int  東風的吐息  = 0 ;
    int  北風之環  = 0 ;
    int  東風之翎  = 0 ;
    int  北風的魂匣  = 0 ;
    int  東風之爪  = 0 ;
    int  北風之尾  = 0 ;
    int  魔王之刃_殘片  = 0 ;
    int  吞天之鯨_只角  = 0 ;
    int  武煉之魂_孤影  = 0 ;
    int  龍王之冕  = 0 ;
    int  血玉之枝  = 0 ;
    int  鎏金之鱗  = 0 ;

     /** [TRANSFER] CHARACTER VAR FROM CalculatorUI*/
    public ArrayList<String> NameList = new ArrayList<String>();
    public ArrayList<Integer> BeforeLvlList= new ArrayList<Integer>();
    public ArrayList<Integer> AfterLvlList= new ArrayList<Integer>();
    public ArrayList<Integer> BeforeBreakLvlList= new ArrayList<Integer>();
    public ArrayList<Boolean> BeforeBreakUPLvlList= new ArrayList<Boolean>();
    public ArrayList<Integer> AfterBreakLvlList= new ArrayList<Integer>();
    public ArrayList<Boolean> AfterBreakUPLvlList= new ArrayList<Boolean>();
    public ArrayList<Integer> BeforeSkill1LvlList= new ArrayList<Integer>();
    public ArrayList<Integer> AfterSkill1LvlList= new ArrayList<Integer>();
    public ArrayList<Integer> BeforeSkill2LvlList= new ArrayList<Integer>();
    public ArrayList<Integer> AfterSkill2LvlList= new ArrayList<Integer>();
    public ArrayList<Integer> BeforeSkill3LvlList= new ArrayList<Integer>();
    public ArrayList<Integer> AfterSkill3LvlList= new ArrayList<Integer>();
    public ArrayList<Boolean> IsCal= new ArrayList<Boolean>();

    /** [BASIC] CHARACTER LVL EXP + MORA */
    public ArrayList<Integer> lvlEXPList = new ArrayList<Integer>();
    public ArrayList<Integer> expEXPList = new ArrayList<Integer>();
    public ArrayList<Integer> moraEXPList = new ArrayList<Integer>();

    /** [BASIC] CHARACTER ASC LVL + MORA */
    public ArrayList<Integer> lvlASCList = new ArrayList<Integer>();
    public ArrayList<Integer> silverASCList = new ArrayList<Integer>();
    public ArrayList<Integer> fragASCList = new ArrayList<Integer>();
    public ArrayList<Integer> chunkASCList = new ArrayList<Integer>();
    public ArrayList<Integer> gemASCList = new ArrayList<Integer>();
    public ArrayList<Integer> bossASCList = new ArrayList<Integer>();
    public ArrayList<Integer> localASCList = new ArrayList<Integer>();
    public ArrayList<Integer> com1ASCList = new ArrayList<Integer>();
    public ArrayList<Integer> com2ASCList = new ArrayList<Integer>();
    public ArrayList<Integer> com3ASCList = new ArrayList<Integer>();
    public ArrayList<Integer> moraASCList = new ArrayList<Integer>();

    /** [BASIC] CHARACTER SKILL LVL + MORA */
    public ArrayList<Integer> lvlSKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> teachSKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> guideSKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> phiSKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> com1SKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> com2SKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> com3SKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> bossSKILLList = new ArrayList<Integer>();
    public ArrayList<Integer> moraSkillList = new ArrayList<Integer>();

    /** [CHAR] CHARACTER REQUIRE ON ASC AND SKILL */
    public ArrayList<String> nameREQUIREList = new ArrayList<String>();
    public ArrayList<String> crystalREQUIREList = new ArrayList<String>();
    public ArrayList<String> bossREQUIREList = new ArrayList<String>();
    public ArrayList<String> localREQUIREList = new ArrayList<String>();
    public ArrayList<String> commonREQUIREList = new ArrayList<String>();
    public ArrayList<String> bookREQUIREList = new ArrayList<String>();
    public ArrayList<String> t_bossREQUIREList = new ArrayList<String>();

    /** [METHOD] SOME CLASS AND VARS*/
    Context context;

    /** [VAR] CHARACTER LVL EXP + MORA */
    public ArrayList<Integer> mora = new ArrayList<Integer>();
    public ArrayList<Integer> exp_small = new ArrayList<Integer>();
    public ArrayList<Integer> exp_mid = new ArrayList<Integer>();
    public ArrayList<Integer> exp_big = new ArrayList<Integer>();

    ArrayList<String> asc_temp_item = new ArrayList<String>();
    ArrayList<Integer> asc_temp_count = new ArrayList<Integer>();
    ArrayList<String> skill1_temp_item = new ArrayList<String>();
    ArrayList<Integer> skill1_temp_count = new ArrayList<Integer>();
    ArrayList<String> skill2_temp_item = new ArrayList<String>();
    ArrayList<Integer> skill2_temp_count = new ArrayList<Integer>();
    ArrayList<String> skill3_temp_item = new ArrayList<String>();
    ArrayList<Integer> skill3_temp_count = new ArrayList<Integer>();

    public void setup(Context context ,ArrayList<String> NameList, ArrayList<Integer> BeforeLvlList, ArrayList<Integer> AfterLvlList, ArrayList<Integer> BeforeBreakLvlList, ArrayList<Integer> AfterBreakLvlList, ArrayList<Integer> BeforeSkill1LvlList, ArrayList<Integer> AfterSkill1LvlList, ArrayList<Integer> BeforeSkill2LvlList, ArrayList<Integer> AfterSkill2LvlList, ArrayList<Integer> BeforeSkill3LvlList, ArrayList<Integer> AfterSkill3LvlList, ArrayList<Boolean> IsCal, ArrayList<Boolean> BeforeBreakUPLvlList, ArrayList<Boolean> AfterBreakUPLvlList) {
        Toast.makeText(context, "FF", Toast.LENGTH_SHORT).show();
        this.context = context;
        this.NameList = NameList;
        System.out.println(NameList);
        this.BeforeLvlList = BeforeLvlList;
        this.AfterLvlList = AfterLvlList;
        this.BeforeBreakLvlList = BeforeBreakLvlList;
        this.AfterBreakLvlList = AfterBreakLvlList;
        this.BeforeSkill1LvlList = BeforeSkill1LvlList;
        this.AfterSkill1LvlList = AfterSkill1LvlList;
        this.BeforeSkill2LvlList = BeforeSkill2LvlList;
        this.AfterSkill2LvlList = AfterSkill2LvlList;
        this.BeforeSkill3LvlList = BeforeSkill3LvlList;
        this.AfterSkill3LvlList = AfterSkill3LvlList;
        this.IsCal = IsCal;
        this.BeforeBreakUPLvlList = BeforeBreakUPLvlList;
        this.AfterBreakUPLvlList = AfterBreakUPLvlList;

        for (int x = 0 ; x < 4 ; x++){
            燃願瑪瑙.add(0);
            滌淨青金.add(0);
            最勝紫晶.add(0);
            哀敘冰玉.add(0);
            自在松石.add(0);
            堅牢黃玉.add(0);
        }

        for (int x = 0 ; x < 3 ; x++){
            歷戰的箭簇.add(0);
            禁咒繪卷.add(0);
            攫金鴉印.add(0);
            不祥的面具.add(0);
            尉官的徽記.add(0);
            原素花蜜.add(0);
            史萊姆原漿.add(0);
            名刀鐔.add(0);
            自由_的哲學.add(0);
            黃金_的哲學.add(0);
            抗爭_的哲學.add(0);
            勤勞_的哲學.add(0);
            詩文_的哲學.add(0);
            繁榮_的哲學.add(0);
            風雅_的哲學.add(0);
            浮世_的哲學.add(0);
            天光_的哲學.add(0);

        }

        for (int k = 0 ; k < 9 ; k ++){asc_temp_count.add(0);}
        for (int k = 0 ; k < 8 ; k ++){skill1_temp_count.add(0);}
        for (int k = 0 ; k < 8 ; k ++){skill2_temp_count.add(0);}
        for (int k = 0 ; k < 8 ; k ++){skill3_temp_count.add(0);}

        readJSON();
    }

    public void calculate () {
        Log.wtf("HEY","TOMMY");
        for (int x = 0 ; x < NameList.size() ; x ++){
            /** CAL EXP */
            for (int y = BeforeLvlList.get(x) ; y < AfterLvlList.get(x) ; y++){
                int exp_grade0 = 0,exp_grade1= 0,exp_grade2= 0,exp_grade3= 0,exp_grade4= 0,exp_grade5= 0,exp_grade6 = 0;
                if(y<=20){exp_grade0 = exp_grade0 + lvlEXPList.get(y-1);}
                else if(y>20 && y <= 40){exp_grade1 = exp_grade1 + lvlEXPList.get(y-1);}
                else if(y>40 && y <= 50){exp_grade2 = exp_grade2 + lvlEXPList.get(y-1);}
                else if(y>50 && y <= 60){exp_grade3 = exp_grade3 + lvlEXPList.get(y-1);}
                else if(y>60 && y <= 70){exp_grade4 = exp_grade4 + lvlEXPList.get(y-1);}
                else if(y>70 && y <= 80){exp_grade5 = exp_grade5 + lvlEXPList.get(y-1);}
                else if(y>80 && y <= 90){exp_grade6 = exp_grade6 + lvlEXPList.get(y-1);}
                mora.add(moraEXPList.get(y-1));
                // LATER WILL TURN TO EXP_BIG / SMALL / MID ONE BY ONE
            }

            Log.wtf("HEY","PAIMON");

            /** CAL ASC */
            int beforeUP = 0 , afterUP = 0;
            if(BeforeBreakUPLvlList.get(x) == true){beforeUP = 1;}
            if(AfterBreakUPLvlList.get(x) == true){afterUP = 1;}

            System.out.println("SS"+BeforeBreakLvlList);
            System.out.println("RR"+AfterBreakLvlList);

            for (int y = BeforeBreakLvlList.get(x)+beforeUP ; y < AfterBreakLvlList.get(x)+afterUP+1 ; y ++){

                int z = getRealPosByName(NameList.get(x));
                asc_temp_item.add(nameREQUIREList.get(z));
                asc_temp_item.add(crystalREQUIREList.get(z));
                asc_temp_item.add(bossREQUIREList.get(z));
                asc_temp_item.add(localREQUIREList.get(z));
                asc_temp_item.add(commonREQUIREList.get(z));

                asc_temp_count.set(0,asc_temp_count.get(0) + silverASCList.get(y));
                asc_temp_count.set(1,asc_temp_count.get(1) +fragASCList.get(y));
                asc_temp_count.set(2,asc_temp_count.get(2) +chunkASCList.get(y));
                asc_temp_count.set(3,asc_temp_count.get(3) +gemASCList.get(y));
                asc_temp_count.set(4,asc_temp_count.get(4) +localASCList.get(y));
                asc_temp_count.set(5,asc_temp_count.get(5) +com1ASCList.get(y));
                asc_temp_count.set(6,asc_temp_count.get(6) +com2ASCList.get(y));
                asc_temp_count.set(7,asc_temp_count.get(7) +com3ASCList.get(y));
                asc_temp_count.set(8,asc_temp_count.get(8) +bossASCList.get(y));
                mora.add(moraASCList.get(y));
                System.out.println("KAMI "+asc_temp_count);

            }
            FindItemByName(asc_temp_item,asc_temp_count);


            /** CAL SKILL1 */

            for (int y = BeforeSkill1LvlList.get(x) ; y < AfterSkill1LvlList.get(x) ; y ++){

                int z = getRealPosByName(NameList.get(x));
                skill1_temp_item.add(nameREQUIREList.get(z));
                skill1_temp_item.add(bookREQUIREList.get(z));
                skill1_temp_item.add(commonREQUIREList.get(z));
                skill1_temp_item.add(t_bossREQUIREList.get(z));

                skill1_temp_count.set(0,skill1_temp_count.get(0) + teachSKILLList.get(y));
                skill1_temp_count.set(1,skill1_temp_count.get(1) + guideSKILLList.get(y));
                skill1_temp_count.set(2,skill1_temp_count.get(2) + phiSKILLList.get(y));
                skill1_temp_count.set(3,skill1_temp_count.get(3) + com1SKILLList.get(y));
                skill1_temp_count.set(4,skill1_temp_count.get(4) + com2SKILLList.get(y));
                skill1_temp_count.set(5,skill1_temp_count.get(5) + com3SKILLList.get(y));
                skill1_temp_count.set(6,skill1_temp_count.get(6) + bossSKILLList.get(y));

                mora.add(moraSkillList.get(x));
                FindItemByName(skill1_temp_item,skill1_temp_count);
            }

            for (int y = BeforeSkill2LvlList.get(x) ; y < AfterSkill2LvlList.get(x) ; y ++){

                int z = getRealPosByName(NameList.get(x));
                skill2_temp_item.add(nameREQUIREList.get(z));
                skill2_temp_item.add(bookREQUIREList.get(z));
                skill2_temp_item.add(commonREQUIREList.get(z));
                skill2_temp_item.add(t_bossREQUIREList.get(z));

                skill2_temp_count.set(0,skill2_temp_count.get(0) + teachSKILLList.get(y));
                skill2_temp_count.set(1,skill2_temp_count.get(1) + guideSKILLList.get(y));
                skill2_temp_count.set(2,skill2_temp_count.get(2) + phiSKILLList.get(y));
                skill2_temp_count.set(3,skill2_temp_count.get(3) + com1SKILLList.get(y));
                skill2_temp_count.set(4,skill2_temp_count.get(4) + com2SKILLList.get(y));
                skill2_temp_count.set(5,skill2_temp_count.get(5) + com3SKILLList.get(y));
                skill2_temp_count.set(6,skill2_temp_count.get(6) + bossSKILLList.get(y));

                mora.add(moraSkillList.get(x));
                FindItemByName(skill2_temp_item,skill2_temp_count);
            }

            for (int y = BeforeSkill3LvlList.get(x) ; y < AfterSkill3LvlList.get(x) ; y ++){

                int z = getRealPosByName(NameList.get(x));
                skill3_temp_item.add(nameREQUIREList.get(z));
                skill3_temp_item.add(bookREQUIREList.get(z));
                skill3_temp_item.add(commonREQUIREList.get(z));
                skill3_temp_item.add(t_bossREQUIREList.get(z));

                skill3_temp_count.set(0,skill3_temp_count.get(0) + teachSKILLList.get(y));
                skill3_temp_count.set(1,skill3_temp_count.get(1) + guideSKILLList.get(y));
                skill3_temp_count.set(2,skill3_temp_count.get(2) + phiSKILLList.get(y));
                skill3_temp_count.set(3,skill3_temp_count.get(3) + com1SKILLList.get(y));
                skill3_temp_count.set(4,skill3_temp_count.get(4) + com2SKILLList.get(y));
                skill3_temp_count.set(5,skill3_temp_count.get(5) + com3SKILLList.get(y));
                skill3_temp_count.set(6,skill3_temp_count.get(6) + bossSKILLList.get(y));

                mora.add(moraSkillList.get(x));
                FindItemByName(skill3_temp_item,skill3_temp_count);
            }
            resultShow();
        }
    }

    public int getRealPosByName(String s) {
        for (int x = 0 ; x < nameREQUIREList.size() ; x++){
            if(nameREQUIREList.get(x).equals(s)){
                return x;
            }
        }
        return 0;
    }


    public void resultShow () {
        // Do later
    }

    /**
     * @param temp_item
     * @param temp_count
     */
    public void FindItemByName(ArrayList<String> temp_item, ArrayList<Integer> temp_count){
        /** CRYSTAL -> USING temp_count's pos 0-3*/
        System.out.println("temp_item : "+temp_item);
        System.out.println("temp_count : "+temp_count);

        if(temp_item.get(1).equals("燃願瑪瑙")){addCountIntoVar(燃願瑪瑙,temp_count,"CRYSTAL");}
        if(temp_item.get(1).equals("滌淨青金")){addCountIntoVar(滌淨青金,temp_count,"CRYSTAL");}
        if(temp_item.get(1).equals("最勝紫晶")){addCountIntoVar(最勝紫晶,temp_count,"CRYSTAL");}
        if(temp_item.get(1).equals("哀敘冰玉")){addCountIntoVar(哀敘冰玉,temp_count,"CRYSTAL");}
        if(temp_item.get(1).equals("自在松石")){addCountIntoVar(自在松石,temp_count,"CRYSTAL");}
        if(temp_item.get(1).equals("堅牢黃玉")){addCountIntoVar(堅牢黃玉,temp_count,"CRYSTAL");}

        if(temp_item.size()>4){
            /** COMMON -> USING temp_count's pos 7-9*/
            if(temp_item.get(4).equals("歷戰的箭簇")){addCountIntoVar(歷戰的箭簇,temp_count,"COMMON");}
            if(temp_item.get(4).equals("禁咒繪卷")){addCountIntoVar(禁咒繪卷,temp_count,"COMMON");}
            if(temp_item.get(4).equals("攫金鴉印")){addCountIntoVar(攫金鴉印,temp_count,"COMMON");}
            if(temp_item.get(4).equals("不祥的面具")){addCountIntoVar(不祥的面具,temp_count,"COMMON");}
            if(temp_item.get(4).equals("尉官的徽記")){addCountIntoVar(尉官的徽記,temp_count,"COMMON");}
            if(temp_item.get(4).equals("原素花蜜")){addCountIntoVar(原素花蜜,temp_count,"COMMON");}
            if(temp_item.get(4).equals("史萊姆原漿")){addCountIntoVar(史萊姆原漿,temp_count,"COMMON");}
            if(temp_item.get(4).equals("名刀鐔")){addCountIntoVar(名刀鐔,temp_count,"COMMON");}
        }

        /** T-COMMON -> USING temp_count's pos 1-3*/
        if(temp_item.get(2).equals("歷戰的箭簇")){addCountIntoVar(歷戰的箭簇,temp_count,"T-COMMON");}
        if(temp_item.get(2).equals("禁咒繪卷")){addCountIntoVar(禁咒繪卷,temp_count,"T-COMMON");}
        if(temp_item.get(2).equals("攫金鴉印")){addCountIntoVar(攫金鴉印,temp_count,"T-COMMON");}
        if(temp_item.get(2).equals("不祥的面具")){addCountIntoVar(不祥的面具,temp_count,"T-COMMON");}
        if(temp_item.get(2).equals("尉官的徽記")){addCountIntoVar(尉官的徽記,temp_count,"T-COMMON");}
        if(temp_item.get(2).equals("原素花蜜")){addCountIntoVar(原素花蜜,temp_count,"T-COMMON");}
        if(temp_item.get(2).equals("史萊姆原漿")){addCountIntoVar(史萊姆原漿,temp_count,"T-COMMON");}
        if(temp_item.get(2).equals("名刀鐔")){addCountIntoVar(名刀鐔,temp_count,"T-COMMON");}

        /** T-BOOK -> USING temp_count's pos 0-2 */
        if(temp_item.get(1).equals("「自由」的哲學")){addCountIntoVar(自由_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「黃金」的哲學")){addCountIntoVar(黃金_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「抗爭」的哲學")){addCountIntoVar(抗爭_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「勤勞」的哲學")){addCountIntoVar(勤勞_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「詩文」的哲學")){addCountIntoVar(詩文_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「繁榮」的哲學")){addCountIntoVar(繁榮_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「風雅」的哲學")){addCountIntoVar(風雅_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「浮世」的哲學")){addCountIntoVar(浮世_的哲學,temp_count,"T-BOOK");}
        if(temp_item.get(1).equals("「天光」的哲學")){addCountIntoVar(天光_的哲學,temp_count,"T-BOOK");}

        /** BOSS -> USING temp_count's pos 8 */
        if(temp_item.get(1).equals("常燃火種")){addCountIntoVar(常燃火種,temp_count,"BOSS");}
        if(temp_item.get(1).equals("淨水之心")){addCountIntoVar(淨水之心,temp_count,"BOSS");}
        if(temp_item.get(1).equals("雷光棱鏡")){addCountIntoVar(雷光棱鏡,temp_count,"BOSS");}
        if(temp_item.get(1).equals("極寒之核")){addCountIntoVar(極寒之核,temp_count,"BOSS");}
        if(temp_item.get(1).equals("颶風之種")){addCountIntoVar(颶風之種,temp_count,"BOSS");}
        if(temp_item.get(1).equals("玄岩之塔")){addCountIntoVar(玄岩之塔,temp_count,"BOSS");}
        if(temp_item.get(1).equals("未熟之玉")){addCountIntoVar(未熟之玉,temp_count,"BOSS");}
        if(temp_item.get(1).equals("晶凝之華")){addCountIntoVar(晶凝之華,temp_count,"BOSS");}
        if(temp_item.get(1).equals("魔偶機心")){addCountIntoVar(魔偶機心,temp_count,"BOSS");}
        if(temp_item.get(1).equals("恒常機關之心")){addCountIntoVar(恒常機關之心,temp_count,"BOSS");}
        if(temp_item.get(1).equals("陰燃之珠")){addCountIntoVar(陰燃之珠,temp_count,"BOSS");}

    }

    /**
     * @param ITEM -> ArrayList of item STORE VAR
     * @param temp_count -> ArrayList
     * @param XPR -> TYPE -> TELL FUN Total pos have in the ITEM
     */
    public void addCountIntoVar(ArrayList<Integer> ITEM, ArrayList<Integer> temp_count, String XPR){
        if(XPR.equals("CRYSTAL")) {
            for (int x = 0; x < 4; x++) {
                System.out.println("XPR "+temp_count.get(x));
                ITEM.set(x, temp_count.get(x));
            }
        }else if(XPR.equals("COMMON")){
            for (int x = 0 ; x < 2 ; x++){
                ITEM.set(x,temp_count.get(x+7));
            }
        }else if(XPR.equals("T-BOOK")){
            for (int x = 0 ; x < 2 ; x++){
                ITEM.set(x,temp_count.get(x));
            }
        }else if(XPR.equals("T-COMMON")){
            for (int x = 0 ; x < 2 ; x++){
                ITEM.set(x,temp_count.get(x+1));
            }
        }
    }

    /**
     *
     * @param ITEM -> Integer of item STORE VAR
     * @param temp_count -> ArrayList
     * @param XPR -> TYPE -> TELL FUN Total pos have in the ITEM
     */
    public void addCountIntoVar(int ITEM, ArrayList<Integer> temp_count, String XPR){
        if(XPR.equals("BOSS")) {
            for (int x = 0; x < 3; x++) {
                ITEM = ITEM + temp_count.get(temp_count.get(8));
            }
        }
    }


    public void readJSON () {
        String char_lvl_exp = LoadData("db/char/char_lvl_exp.json");
        String char_asc_lvl = LoadData("db/char/char_asc_lvl.json");
        String char_skill_lvl = LoadData("db/char/char_skill_lvl.json");
        String char_require_asc_skill = LoadData("db/char/char_require_asc_skill.json");

        try {
            JSONArray array = new JSONArray(char_lvl_exp);
            for (int i = 0; i < array.length(); i++) {
                JSONObject object = array.getJSONObject(i);
                int lvl = object.getInt("lvl");
                int exp = object.getInt("exp");
                int mora = object.getInt("mora");
                lvlEXPList.add(lvl);
                expEXPList.add(exp);
                moraEXPList.add(mora);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            JSONArray array = new JSONArray(char_asc_lvl);
            for (int i = 0; i < array.length(); i++) {
                JSONObject object = array.getJSONObject(i);
                int lvl = object.getInt("lvl");
                int silver = object.getInt("silver");
                int fragment = object.getInt("fragment");
                int chunk = object.getInt("chunk");
                int gemstone = object.getInt("gemstone");
                int local = object.getInt("local");
                int common1 = object.getInt("common1");
                int common2 = object.getInt("common2");
                int common3 = object.getInt("common3");
                int boss = object.getInt("boss");
                int mora = object.getInt("mora");
                lvlASCList.add(lvl);
                silverASCList.add(silver);
                fragASCList.add(fragment);
                chunkASCList.add(chunk);
                gemASCList.add(gemstone);
                localASCList.add(local);
                com1ASCList.add(common1);
                com2ASCList.add(common2);
                com3ASCList.add(common3);
                bossASCList.add(boss);
                moraASCList.add(mora);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            JSONArray array = new JSONArray(char_skill_lvl);
            for (int i = 0; i < array.length(); i++) {
                JSONObject object = array.getJSONObject(i);
                int lvl = object.getInt("lvl");
                int teach = object.getInt("teach");
                int guide = object.getInt("guide");
                int phi = object.getInt("phi");
                int common1 = object.getInt("common1");
                int common2 = object.getInt("common2");
                int common3 = object.getInt("common3");
                int boss = object.getInt("boss");
                int mora = object.getInt("mora");
                lvlSKILLList.add(lvl);
                teachSKILLList.add(teach);
                guideSKILLList.add(guide);
                phiSKILLList.add(phi);
                com1SKILLList.add(common1);
                com2SKILLList.add(common2);
                com3SKILLList.add(common3);
                bossSKILLList.add(boss);
                moraSkillList.add(mora);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            JSONArray array = new JSONArray(char_require_asc_skill);
            for (int i = 0; i < array.length(); i++) {
                JSONObject object = array.getJSONObject(i);
                String name = object.getString("name");
                String crystal = object.getString("crystal");
                String boss = object.getString("boss");
                String local = object.getString("local");
                String common = object.getString("common");
                String book = object.getString("book");
                String t_boss = object.getString("t_boss");
                nameREQUIREList.add(name);
                crystalREQUIREList.add(crystal);
                bossREQUIREList.add(boss);
                localREQUIREList.add(local);
                commonREQUIREList.add(common);
                bookREQUIREList.add(book);
                t_bossREQUIREList.add(t_boss);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        Toast.makeText(context, "GOGO", Toast.LENGTH_SHORT).show();
        calculate();
    }

    public String LoadData(String inFile) {
        String tContents = "";

        try {
            InputStream stream = context.getAssets().open(inFile);

            int size = stream.available();
            byte[] buffer = new byte[size];
            stream.read(buffer);
            stream.close();
            tContents = new String(buffer);
        } catch (IOException e) {
            // Handle exceptions here
        }

        return tContents;

    }
}
